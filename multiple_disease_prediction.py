# -*- coding: utf-8 -*-
"""multiple disease pred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iEsaZf9LHntB2T5A-FRK2bwVQGLcSrop
"""

import streamlit as st
import pandas as pd
import numpy as np
import sklearn
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import load_breast_cancer
import pickle

# Load the models
with open('breast_cancer_model.sav', 'rb') as file:
    breast_cancer_model = pickle.load(file)

with open('heart_disease_model.sav', 'rb') as file:
    heart_disease_model = pickle.load(file)

with open('diabetes_model.sav', 'rb') as file:
    diabetes_model = pickle.load(file)

# Define the predict functions
def predict_breast_cancer(data):
    prediction = breast_cancer_model.predict(data)
    if prediction[0] == 0:
        return "Benign"
    else:
        return "Malignant"

def predict_heart_disease(data):
    prediction = heart_disease_model.predict(data)
    return prediction[0]

def predict_diabetes(data):
    prediction = diabetes_model.predict(data)
    return prediction[0]

# Define the main function for the Streamlit app
def main():
    st.set_page_config(page_title="Disease Prediction App")

    # Add a sidebar with options for different diseases
    st.sidebar.title("Select a disease:")
    options = ["Breast Cancer", "Heart Disease", "Diabetes"]
    choice = st.sidebar.selectbox("", options)

    # Load the appropriate data and model based on the user's choice
    if choice == "Breast Cancer":
        st.title("Breast Cancer Prediction")
        st.write("This app predicts whether a breast cancer tumor is benign or malignant using machine learning.")
        data_fields = ["Radius Mean", "Texture Mean", "Perimeter Mean", "Area Mean", "Smoothness Mean", "Compactness Mean", "Concavity Mean", "Concave Points Mean", "Symmetry Mean", "Fractal Dimension Mean"]
        data = []
        for field in data_fields:
            data.append(st.number_input(field))
        if st.button("Predict"):
            data = np.array(data).reshape(1, -1)
            prediction = predict_breast_cancer(data)
            st.write(f"The tumor is {prediction}.")

    elif choice == "Heart Disease":
        st.title("Heart Disease Prediction")
        st.write("This app predicts whether a person has heart disease or not using machine learning.")
        data_fields = ["Age", "Sex", "Chest Pain Type", "Resting Blood Pressure", "Cholesterol", "Fasting Blood Sugar", "Resting ECG", "Max Heart Rate", "Exercise Induced Angina", "ST Depression", "ST Slope", "Number of Major Vessels", "Thalassemia"]
        data = []
        for field in data_fields:
            data.append(st.number_input(field))
        if st.button("Predict"):
            data = np.array(data).reshape(1, -1)
            prediction = predict_heart_disease(data)
            if prediction == 1:
                st.write("The person has heart disease.")
            else:
                st.write("The person does not have heart disease.")

    elif choice == "Diabetes":
        st.title("Diabetes Prediction")
        st.write("This app predicts whether a person has diabetes or not using machine learning.")
        data_fields = ["Pregnancies", "Glucose", "Blood Pressure", "Skin Thickness", "Insulin", "BMI", "Diabetes Pedigree Function", "Age"]
        data = []
        for field in data_fields:
            data.append(st.number_input(field))
        if st.button("Predict"):
            data = np.array(data).reshape(1, -1)
            prediction = predict_diabetes(data)
            if prediction == 1:
                st.write("The person has diabetes.")
            else:
                st.write("The person does not have diabetes.")