# -*- coding: utf-8 -*-
"""MDP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GarrRqepIGy1zABN9qeyHDJBG2bGnZPe
"""

# -*- coding: utf-8 -*-


import pickle
import streamlit as st
from streamlit_option_menu import option_menu


# loading the saved models

diabetes_model = pickle.load(open('diabetes_model.sav', 'rb'))

heart_disease_model = pickle.load(open('heart_disease_model.sav','rb'))

parkinsons_model = pickle.load(open('parkinsons_model.sav', 'rb'))



# sidebar for navigation
with st.sidebar:
    
    selected = option_menu('Multiple Disease Prediction System',
                          
                          ['Diabetes Prediction',
                           'Heart Disease Prediction',
                           'Parkinsons Prediction'],
                          icons=['activity','heart','person'],
                          default_index=0)
    
    
# Diabetes Prediction Page
if (selected == 'Diabetes Prediction'):
    
    # page title
    st.title('Diabetes Prediction using ML')
    
    
    # getting the input data from the user
    col1, col2, col3 = st.columns(3)
    
    with col1:
        Pregnancies = st.text_input('Number of Pregnancies')
        
    with col2:
        Glucose = st.text_input('Glucose Level')
    
    with col3:
        BloodPressure = st.text_input('Blood Pressure value')
    
    with col1:
        SkinThickness = st.text_input('Skin Thickness value')
    
    with col2:
        Insulin = st.text_input('Insulin Level')
    
    with col3:
        BMI = st.text_input('BMI value')
    
    with col1:
        DiabetesPedigreeFunction = st.text_input('Diabetes Pedigree Function value')
    
    with col2:
        Age = st.text_input('Age of the Person')
    
    
    # code for Prediction
    diab_diagnosis = ''
    
    # creating a button for Prediction
    
    if st.button('Diabetes Test Result'):
        diab_prediction = diabetes_model.predict([[Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age]])
        
        if (diab_prediction[0] == 1):
          diab_diagnosis = 'The person is diabetic'
        else:
          diab_diagnosis = 'The person is not diabetic'
        
    st.success(diab_diagnosis)




# Heart Disease Prediction Page
if (selected == 'Heart Disease Prediction'):
    
    # page title
    st.title('Heart Disease Prediction using ML')
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        age = st.text_input('Age')
        
    with col2:
        sex = st.text_input('Sex')
        
    with col3:
        cp = st.text_input('Chest Pain types')
        
    with col1:
        trestbps = st.text_input('Resting Blood Pressure')
        
    with col2:
        chol = st.text_input('Serum Cholestoral in mg/dl')
        
    with col3:
        fbs = st.text_input('Fasting Blood Sugar > 120 mg/dl')
        
    with col1:
        restecg = st.text_input('Resting Electrocardiographic results')
        
    with col2:
        thalach = st.text_input('Maximum Heart Rate achieved')
        
    with col3:
        exang = st.text_input('Exercise Induced Angina')
        
    with col1:
        oldpeak = st.text_input('ST depression induced by exercise')
        
    with col2:
        slope = st.text_input('Slope of the peak exercise ST segment')
        
    with col3:
        ca = st.text_input('Major vessels colored by flourosopy')
        
    with col1:
        thal = st.text_input('thal: 0 = normal; 1 = fixed defect; 2 = reversable defect')
        
        
     
     
    # code for Prediction
    heart_diagnosis = ''
    
    # creating a button for Prediction
    
    if st.button('Heart Disease Test Result'):
        heart_prediction = heart_disease_model.predict([[age, sex, cp, trestbps, chol, fbs, restecg,thalach,exang,oldpeak,slope,ca,thal]])                          
        
        if (heart_prediction[0] == 1):
          heart_diagnosis = 'The person is having heart disease'
        else:
          heart_diagnosis = 'The person does not have any heart disease'
        
    st.success(heart_diagnosis)
        
    
    

# Parkinson's Prediction Page
if (selected == "Parkinsons Prediction"):
    
    # page title
    st.title("Parkinson's Disease Prediction using ML")
    
    col1, col2, col3, col4, col5 = st.columns(5)  
    
    with col1:
        fo = st.text_input('MDVP:Fo(Hz)')
        
    with col2:
        fhi = st.text_input('MDVP:Fhi(Hz)')
        
    with col3:
        flo = st.text_input('MDVP:Flo(Hz)')
        
    with col4:
        Jitter_percent = st.text_input('MDVP:Jitter(%)')
        
    with col5:
        Jitter_Abs = st.text_input('MDVP:Jitter(Abs)')
        
    with col1:
        RAP = st.text_input('MDVP:RAP')
        
    with col2:
        PPQ = st.text_input('MDVP:PPQ')
        
    with col3:
        DDP = st.text_input('Jitter:DDP')
        
    with col4:
        Shimmer = st.text_input('MDVP:Shimmer')
        
    with col5:
        Shimmer_dB = st.text_input('MDVP:Shimmer(dB)')
        
    with col1:
        APQ3 = st.text_input('Shimmer:APQ3')
        
    with col2:
        APQ5 = st.text_input('Shimmer:APQ5')
        
    with col3:
        APQ = st.text_input('MDVP:APQ')
        
    with col4:
        DDA = st.text_input('Shimmer:DDA')
        
    with col5:
        NHR = st.text_input('NHR')
        
    with col1:
        HNR = st.text_input('HNR')
        
    with col2:
        RPDE = st.text_input('RPDE')
        
    with col3:
        DFA = st.text_input('DFA')
        
    with col4:
        spread1 = st.text_input('spread1')
        
    with col5:
        spread2 = st.text_input('spread2')
        
    with col1:
        D2 = st.text_input('D2')
        
    with col2:
        PPE = st.text_input('PPE')
        
    
    
    # code for Prediction
    parkinsons_diagnosis = ''
    
    # creating a button for Prediction    
    if st.button("Parkinson's Test Result"):
        parkinsons_prediction = parkinsons_model.predict([[fo, fhi, flo, Jitter_percent, Jitter_Abs, RAP, PPQ,DDP,Shimmer,Shimmer_dB,APQ3,APQ5,APQ,DDA,NHR,HNR,RPDE,DFA,spread1,spread2,D2,PPE]])                          
        
        if (parkinsons_prediction[0] == 1):
          parkinsons_diagnosis = "The person has Parkinson's disease"
        else:
          parkinsons_diagnosis = "The person does not have Parkinson's disease"
        
    st.success(parkinsons_diagnosis)


# Breast Cancer Prediction

def home():
    st.write('''
    # Breast Cancer Prediction
    This app predicts the likelihood of breast cancer based on various features.
    To get started, select a feature on the left sidebar.
    ''')
def breast_cancer_prediction():
    # Load the model
    bc_model = pickle.load(open('breast_cancer_model.sav', 'rb'))
    
    # Get inputs from the user
    radius_mean = st.number_input("Radius Mean", value=14.0)
    texture_mean = st.number_input("Texture Mean", value=20.0)
    perimeter_mean = st.number_input("Perimeter Mean", value=91.0)
    area_mean = st.number_input("Area Mean", value=630.0)
    smoothness_mean = st.number_input("Smoothness Mean", value=0.1)
    compactness_mean = st.number_input("Compactness Mean", value=0.1)
    concavity_mean = st.number_input("Concavity Mean", value=0.1)
    concave_points_mean = st.number_input("Concave Points Mean", value=0.1)
    symmetry_mean = st.number_input("Symmetry Mean", value=0.1)
    fractal_dimension_mean = st.number_input("Fractal Dimension Mean", value=0.1)
    radius_se = st.number_input("Radius SE", value=0.4)
    texture_se = st.number_input("Texture SE", value=1.0)
    perimeter_se = st.number_input("Perimeter SE", value=4.0)
    area_se = st.number_input("Area SE", value=20.0)
    smoothness_se = st.number_input("Smoothness SE", value=0.01)
    compactness_se = st.number_input("Compactness SE", value=0.02)
    concavity_se = st.number_input("Concavity SE", value=0.02)
    concave_points_se = st.number_input("Concave Points SE", value=0.01)
    symmetry_se = st.number_input("Symmetry SE", value=0.01)
    fractal_dimension_se = st.number_input("Fractal Dimension SE", value=0.002)
    radius_worst = st.number_input("Radius Worst", value=17.0)
    texture_worst = st.number_input("Texture Worst", value=29.0)
    perimeter_worst = st.number_input("Perimeter Worst", value=114.0)
    area_worst = st.number_input("Area Worst", value=925.0)
    smoothness_worst = st.number_input("Smoothness Worst", value=0.13)
    compactness_worst = st.number_input("Compactness Worst", value=0.3)
    concavity_worst = st.number_input("Concavity Worst", value=0.3)
    concave_points_worst = st.number_input("Concave Points Worst", value=0.1)
    symmetry_worst = st.number_input("Symmetry Worst", value=0.2)
    fractal_dimension_worst = st.number_input("Fractal Dimension Worst", value=0.05)

    # Make prediction
    prediction = bc_model.predict([[radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean, concavity_mean, concave_points_mean, symmetry_mean, fractal_dimension_mean, radius_se, texture_se, perimeter_se, area_se, smoothness_se, compactness_se, concavity_se, concave_points_se, symmetry_se, fractal_dimension_se, radius_worst, texture_worst, perimeter_worst, area_worst, smoothness_worst, compactness_worst, concavity_worst, concave_points_worst, symmetry_worst, fractal_dimension_worst]])

    # Display the prediction
    st.write("")
    if prediction == 0:
        st.warning('The patient is likely to be benign (not have breast cancer)')
    else:
        st.success('The patient is likely to be malignant (have breast cancer)')


# Sidebar Navigation
menu = ['Home', 'Parkinsons Disease', 'Diabetes', 'Heart Disease', 'Breast Cancer']
choice = st.sidebar.selectbox('Select the Disease you want to predict', menu)

# Display the appropriate page based on the user's menu choice
if choice == 'Home':
    home()
elif choice == 'Parkinsons Disease':
    parkinsons_prediction()
elif choice == 'Diabetes':
    diabetes_prediction()
elif choice == 'Heart Disease':
    heart_disease_prediction()
elif choice == 'Breast Cancer':
    breast_cancer_prediction()